package main

import (
	"fmt"
	"go/format"
	"os"
	"strings"
	"unicode"
)

func normalizeName(n string) string {
	chars := []rune(n)
	chars[0] = unicode.ToUpper(chars[0])
	return string(chars)
}

func main() {
	data := []string{}
	writef := func(format string, args ...interface{}) {
		data = append(data, fmt.Sprintf(format, args...))
	}

	types := []string{
		"int",
		"int8",
		"int16",
		"int32",
		"int64",
		"uint",
		"uint8",
		"uint16",
		"uint32",
		"uint64",
	}

	writef("// Code generated by generators/flags; DO NOT EDIT.\n\n")

	writef("package clip\n")

	for _, t := range types {
		writef("func (v *Clip) %s(name string) NumberFlag[%s] {\n", normalizeName(t), t)
		writef("i := &numberFlag[%s]{\n", t)
		writef("basicFlag: basicFlag[%s] {\n", t)
		writef("name: name,\n")
		writef("},\n")
		writef("}\n")
		writef("v.flags = append(v.flags, i)\n")
		writef("return i")
		writef("}\n\n")
	}

	extractName := func() {
		writef("if ff.name == name && !shorthand {\nreturn ff\n }")
		writef("else if ff.shorthand == name && shorthand { \nreturn ff\n }\n")
	}

	writef("func (v *Clip) argumentByName(name string, shorthand bool) baseFlag {\n")
	writef("for _, f := range v.flags {\n")
	writef("switch ff := f.(type) {\n")
	writef("case *boolFlag:\n")
	extractName()
	writef("case *stringFlag:\n")
	extractName()
	writef("case *stringSliceFlag:\n")
	extractName()
	writef("case *kvFlag:\n")
	extractName()
	writef("case *optionsFlag:\n")
	extractName()
	for _, t := range types {
		writef("case *numberFlag[%s]:\n", t)
		extractName()
	}
	writef("}\n")
	writef("}\n")
	writef("return nil\n")
	writef("}\n")

	rawSrc := []byte(strings.Join(data, ""))

	src, err := format.Source(rawSrc)
	if err != nil {
		panic(err)
	}

	err = os.WriteFile("clip.generated.go", src, 0644)
	if err != nil {
		panic(err)
	}
}
