// Code generated by generators/flags; DO NOT EDIT.

package clip

func (v *Clip) Int(name string) NumberFlag[int] {
	i := &numberFlag[int]{
		basicFlag: basicFlag[int]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Int8(name string) NumberFlag[int8] {
	i := &numberFlag[int8]{
		basicFlag: basicFlag[int8]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Int16(name string) NumberFlag[int16] {
	i := &numberFlag[int16]{
		basicFlag: basicFlag[int16]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Int32(name string) NumberFlag[int32] {
	i := &numberFlag[int32]{
		basicFlag: basicFlag[int32]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Int64(name string) NumberFlag[int64] {
	i := &numberFlag[int64]{
		basicFlag: basicFlag[int64]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Uint(name string) NumberFlag[uint] {
	i := &numberFlag[uint]{
		basicFlag: basicFlag[uint]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Uint8(name string) NumberFlag[uint8] {
	i := &numberFlag[uint8]{
		basicFlag: basicFlag[uint8]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Uint16(name string) NumberFlag[uint16] {
	i := &numberFlag[uint16]{
		basicFlag: basicFlag[uint16]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Uint32(name string) NumberFlag[uint32] {
	i := &numberFlag[uint32]{
		basicFlag: basicFlag[uint32]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) Uint64(name string) NumberFlag[uint64] {
	i := &numberFlag[uint64]{
		basicFlag: basicFlag[uint64]{
			name: name,
		},
	}
	v.flags = append(v.flags, i)
	return i
}

func (v *Clip) argumentByName(name string, shorthand bool) baseFlag {
	for _, f := range v.flags {
		switch ff := f.(type) {
		case *boolFlag:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *stringFlag:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *stringSliceFlag:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *kvFlag:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *optionsFlag:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[int]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[int8]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[int16]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[int32]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[int64]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[uint]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[uint8]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[uint16]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[uint32]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		case *numberFlag[uint64]:
			if ff.name == name && !shorthand {
				return ff
			} else if ff.shorthand == name && shorthand {
				return ff
			}
		}
	}
	return nil
}
